"""
Empire Builder - Supabase User Authentication System
Handles user registration, login, logout, and session management using Supabase
"""

import hashlib
import secrets
import uuid
from datetime import datetime, timedelta
from dataclasses import dataclass
from typing import Optional, Dict, Any
from functools import wraps
from flask import session, request, jsonify, redirect, url_for
from supabase_config import get_supabase_client, get_supabase_service_client

@dataclass
class User:
    id: str
    username: str
    email: str
    password_hash: str
    salt: str
    created_at: str
    last_login: str = None
    is_active: bool = True
    empire_id: str = None

class SupabaseAuthDatabase:
    def __init__(self):
        self.client = get_supabase_client()
        self.service_client = get_supabase_service_client()  # For admin operations
        self.init_auth_tables()
    
    def init_auth_tables(self):
        """Initialize authentication tables in Supabase"""
        try:
            # Create users table if it doesn't exist
            # Note: In production, you should create these tables through Supabase dashboard or migrations
            print("🔐 Supabase Auth: Tables should be created through Supabase dashboard")
            print("📋 Required tables: users, user_sessions")
            
            # Test connection by trying to query users table
            try:
                self.client.table('users').select('count').limit(1).execute()
                print("✅ Users table exists")
            except Exception as e:
                print(f"⚠️  Users table may not exist: {e}")
                
            try:
                self.client.table('user_sessions').select('count').limit(1).execute()
                print("✅ User sessions table exists")
            except Exception as e:
                print(f"⚠️  User sessions table may not exist: {e}")
                
        except Exception as e:
            print(f"❌ Error initializing Supabase auth tables: {e}")
    
    def hash_password(self, password: str, salt: str = None) -> tuple:
        """Hash password with salt"""
        if salt is None:
            salt = secrets.token_hex(32)
        
        # Use PBKDF2 for secure password hashing
        password_hash = hashlib.pbkdf2_hmac(
            'sha256',
            password.encode('utf-8'),
            salt.encode('utf-8'),
            100000  # 100,000 iterations
        ).hex()
        
        return password_hash, salt
    
    def verify_password(self, password: str, password_hash: str, salt: str) -> bool:
        """Verify password against hash"""
        test_hash, _ = self.hash_password(password, salt)
        return test_hash == password_hash
    
    def create_user(self, username: str, email: str, password: str) -> Optional[str]:
        """Create a new user account in Supabase"""
        try:
            # Use service client for admin operations to bypass RLS
            service_client = self.service_client or self.client
            
            # Check if username or email already exists
            existing_user = service_client.table('users').select('id').or_(
                f'username.eq.{username},email.eq.{email}'
            ).execute()
            
            if existing_user.data:
                return None  # User already exists
            
            # Create user with UUID
            password_hash, salt = self.hash_password(password)
            
            user_data = {
                'username': username,
                'email': email,
                'password_hash': password_hash,
                'salt': salt,
                'created_at': datetime.now().isoformat(),
                'is_active': True,
                'empire_id': None
            }
            
            result = service_client.table('users').insert(user_data).execute()
            
            if result.data:
                return result.data[0]['id']  # Return the UUID generated by Supabase
            return None
            
        except Exception as e:
            print(f"Error creating user: {e}")
            return None
    
    def authenticate_user(self, username: str, password: str) -> Optional[User]:
        """Authenticate user login using Supabase"""
        try:
            # Get user by username
            result = self.client.table('users').select('*').eq(
                'username', username
            ).eq('is_active', True).execute()
            
            if not result.data:
                return None
            
            user_data = result.data[0]
            
            # Verify password
            if self.verify_password(password, user_data['password_hash'], user_data['salt']):
                # Update last login
                self.update_last_login(user_data['id'])
                
                return User(
                    id=user_data['id'],
                    username=user_data['username'],
                    email=user_data['email'],
                    password_hash=user_data['password_hash'],
                    salt=user_data['salt'],
                    created_at=user_data['created_at'],
                    last_login=user_data.get('last_login'),
                    is_active=user_data['is_active'],
                    empire_id=user_data.get('empire_id')
                )
            
            return None
            
        except Exception as e:
            print(f"Error authenticating user: {e}")
            return None
    
    def get_user(self, user_id: str) -> Optional[User]:
        """Get user by ID from Supabase"""
        try:
            result = self.client.table('users').select('*').eq('id', user_id).execute()
            
            if not result.data:
                return None
            
            user_data = result.data[0]
            return User(
                id=user_data['id'],
                username=user_data['username'],
                email=user_data['email'],
                password_hash=user_data['password_hash'],
                salt=user_data['salt'],
                created_at=user_data['created_at'],
                last_login=user_data.get('last_login'),
                is_active=user_data['is_active'],
                empire_id=user_data.get('empire_id')
            )
            
        except Exception as e:
            print(f"Error getting user: {e}")
            return None
    
    def get_user_by_username(self, username: str) -> Optional[User]:
        """Get user by username from Supabase"""
        try:
            result = self.client.table('users').select('*').eq('username', username).execute()
            
            if not result.data:
                return None
            
            user_data = result.data[0]
            return User(
                id=user_data['id'],
                username=user_data['username'],
                email=user_data['email'],
                password_hash=user_data['password_hash'],
                salt=user_data['salt'],
                created_at=user_data['created_at'],
                last_login=user_data.get('last_login'),
                is_active=user_data['is_active'],
                empire_id=user_data.get('empire_id')
            )
            
        except Exception as e:
            print(f"Error getting user by username: {e}")
            return None
    
    def update_last_login(self, user_id: str):
        """Update user's last login timestamp in Supabase"""
        try:
            self.client.table('users').update({
                'last_login': datetime.now().isoformat()
            }).eq('id', user_id).execute()
            
        except Exception as e:
            print(f"Error updating last login: {e}")
    
    def link_user_to_empire(self, user_id: str, empire_id: str):
        """Link a user account to an empire in Supabase"""
        try:
            self.client.table('users').update({
                'empire_id': empire_id
            }).eq('id', user_id).execute()
            
        except Exception as e:
            print(f"Error linking user to empire: {e}")
    
    def create_session(self, user_id: str, ip_address: str = None, user_agent: str = None) -> str:
        """Create a secure session token in Supabase"""
        try:
            session_token = secrets.token_urlsafe(32)
            expires_at = (datetime.now() + timedelta(days=30)).isoformat()
            
            session_data = {
                'user_id': user_id,
                'session_token': session_token,
                'created_at': datetime.now().isoformat(),
                'expires_at': expires_at,
                'is_active': True,
                'ip_address': ip_address,
                'user_agent': user_agent
            }
            
            service_client = self.service_client or self.client
            result = service_client.table('user_sessions').insert(session_data).execute()
            
            if result.data:
                return session_token
            return None
            
        except Exception as e:
            print(f"Error creating session: {e}")
            return None
    
    def validate_session(self, session_token: str) -> Optional[str]:
        """Validate session token and return user_id from Supabase"""
        try:
            current_time = datetime.now().isoformat()
            
            result = self.client.table('user_sessions').select('user_id').eq(
                'session_token', session_token
            ).eq('is_active', True).gt('expires_at', current_time).execute()
            
            if result.data:
                return result.data[0]['user_id']
            return None
            
        except Exception as e:
            print(f"Error validating session: {e}")
            return None
    
    def invalidate_session(self, session_token: str):
        """Invalidate a session token in Supabase"""
        try:
            self.client.table('user_sessions').update({
                'is_active': False
            }).eq('session_token', session_token).execute()
            
        except Exception as e:
            print(f"Error invalidating session: {e}")
    
    def cleanup_expired_sessions(self):
        """Clean up expired sessions from Supabase"""
        try:
            current_time = datetime.now().isoformat()
            
            self.client.table('user_sessions').delete().lt(
                'expires_at', current_time
            ).execute()
            
        except Exception as e:
            print(f"Error cleaning up expired sessions: {e}")

# Global Supabase auth database instance
supabase_auth_db = SupabaseAuthDatabase()

def login_required(f):
    """Decorator to require user login"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        if 'user_id' not in session:
            if request.is_json:
                return jsonify({'error': 'Authentication required'}), 401
            return redirect(url_for('login'))
        return f(*args, **kwargs)
    return decorated_function

def get_current_user() -> Optional[User]:
    """Get the currently logged-in user from Supabase"""
    if 'user_id' in session:
        return supabase_auth_db.get_user(session['user_id'])
    return None

def login_user(user: User, remember_me: bool = False):
    """Log in a user and create session in Supabase"""
    session['user_id'] = user.id
    session['username'] = user.username
    session['empire_id'] = user.empire_id
    
    if remember_me:
        session.permanent = True
    
    # Create secure session token in Supabase
    ip_address = request.environ.get('HTTP_X_FORWARDED_FOR', request.environ.get('REMOTE_ADDR'))
    user_agent = request.environ.get('HTTP_USER_AGENT', '')
    session_token = supabase_auth_db.create_session(user.id, ip_address, user_agent)
    if session_token:
        session['session_token'] = session_token

def logout_user():
    """Log out the current user and invalidate session in Supabase"""
    if 'session_token' in session:
        supabase_auth_db.invalidate_session(session['session_token'])
    
    session.clear()